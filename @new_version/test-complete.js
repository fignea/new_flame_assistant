#!/usr/bin/env node

const http = require('http');

console.log('üîç Verificando que la aplicaci√≥n funcione correctamente...\n');

// Funci√≥n para hacer requests HTTP
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const req = http.request(url, options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          body: data
        });
      });
    });
    
    req.on('error', reject);
    req.end();
  });
}

async function testApplication() {
  try {
    console.log('1. üñ•Ô∏è  Probando frontend (puerto 80)...');
    const frontendResponse = await makeRequest('http://localhost:80');
    if (frontendResponse.statusCode === 200) {
      console.log('   ‚úÖ Frontend respondiendo correctamente');
      if (frontendResponse.body.includes('Flame Assistant')) {
        console.log('   ‚úÖ HTML contiene el t√≠tulo correcto');
      } else {
        console.log('   ‚ùå HTML no contiene el t√≠tulo esperado');
      }
    } else {
      console.log(`   ‚ùå Frontend respondi√≥ con c√≥digo: ${frontendResponse.statusCode}`);
    }

    console.log('\n2. üîß Probando backend (puerto 3001)...');
    const backendResponse = await makeRequest('http://localhost:3001/api/auth/profile');
    if (backendResponse.statusCode === 200) {
      console.log('   ‚úÖ Backend respondiendo correctamente');
      const data = JSON.parse(backendResponse.body);
      if (data.message === 'Token de acceso requerido') {
        console.log('   ‚úÖ API de autenticaci√≥n funcionando correctamente');
      } else {
        console.log('   ‚ùå Respuesta inesperada de la API');
      }
    } else {
      console.log(`   ‚ùå Backend respondi√≥ con c√≥digo: ${backendResponse.statusCode}`);
    }

    console.log('\n3. üìÅ Probando archivos est√°ticos...');
    const jsResponse = await makeRequest('http://localhost:80/assets/index-e812d829.js');
    if (jsResponse.statusCode === 200) {
      console.log('   ‚úÖ Archivo JavaScript se sirve correctamente');
      if (jsResponse.body.includes('React')) {
        console.log('   ‚úÖ JavaScript contiene React');
      } else {
        console.log('   ‚ùå JavaScript no contiene React');
      }
    } else {
      console.log(`   ‚ùå Archivo JavaScript respondi√≥ con c√≥digo: ${jsResponse.statusCode}`);
    }

    const cssResponse = await makeRequest('http://localhost:80/assets/index-b2bff99d.css');
    if (cssResponse.statusCode === 200) {
      console.log('   ‚úÖ Archivo CSS se sirve correctamente');
    } else {
      console.log(`   ‚ùå Archivo CSS respondi√≥ con c√≥digo: ${cssResponse.statusCode}`);
    }

    console.log('\n4. üîó Probando ruta de login...');
    const loginResponse = await makeRequest('http://localhost:80/login');
    if (loginResponse.statusCode === 200) {
      console.log('   ‚úÖ Ruta /login responde correctamente');
      if (loginResponse.body.includes('Flame Assistant')) {
        console.log('   ‚úÖ P√°gina de login contiene el t√≠tulo correcto');
      } else {
        console.log('   ‚ùå P√°gina de login no contiene el t√≠tulo esperado');
      }
    } else {
      console.log(`   ‚ùå Ruta /login respondi√≥ con c√≥digo: ${loginResponse.statusCode}`);
    }

    console.log('\nüéâ ¬°VERIFICACI√ìN COMPLETA!');
    console.log('\nüìã Resumen:');
    console.log('   ‚Ä¢ Frontend: http://localhost');
    console.log('   ‚Ä¢ Backend: http://localhost:3001');
    console.log('   ‚Ä¢ Login: http://localhost/login');
    console.log('\n‚ú® Tu aplicaci√≥n est√° funcionando correctamente!');

  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error.message);
  }
}

testApplication();
