services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: flame-assistant-postgres-prod
    environment:
      POSTGRES_DB: flame_assistant
      POSTGRES_USER: flame_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    networks:
      - flame-assistant-prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flame_user -d flame_assistant"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: flame-assistant-redis-prod
    volumes:
      - redis_prod_data:/data
    restart: unless-stopped
    networks:
      - flame-assistant-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: flame-assistant-backend-prod
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGIN=${CORS_ORIGIN}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=flame_assistant
      - DB_USER=flame_user
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_URL=redis://redis:6379
      - REDIS_DB=0
      - WHATSAPP_SESSION_PATH=/app/sessions
      - WHATSAPP_QR_TIMEOUT=120000
      - WHATSAPP_CONNECT_TIMEOUT=60000
      - LOG_LEVEL=info
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - backend_prod_sessions:/app/sessions
      - backend_prod_logs:/app/logs
      - backend_prod_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - flame-assistant-prod-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: flame-assistant-frontend-prod
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=${API_URL}
      - VITE_WS_URL=${WS_URL}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - flame-assistant-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: flame-assistant-nginx-prod
    ports:
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - flame-assistant-prod-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  backend_prod_sessions:
    driver: local
  backend_prod_logs:
    driver: local
  backend_prod_uploads:
    driver: local

networks:
  flame-assistant-prod-network:
    driver: bridge