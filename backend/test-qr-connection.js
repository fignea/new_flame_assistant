const { whatsappSimpleService } = require('./dist/services/whatsapp-simple.service');

async function testQRConnection() {
  console.log('üß™ Probando conexi√≥n completa con QR...\n');

  try {
    const userId = 'test-user-qr-123';
    
    // Test 1: Crear sesi√≥n
    console.log('1Ô∏è‚É£ Creando sesi√≥n...');
    const result = await whatsappSimpleService.createSession(userId);
    console.log('‚úÖ Sesi√≥n creada:', result.sessionId);

    // Test 2: Configurar listeners de eventos
    console.log('\n2Ô∏è‚É£ Configurando listeners de eventos...');
    
    whatsappSimpleService.on('qr', (userId, qr, qrDataURL) => {
      console.log('üîç QR Code recibido!');
      console.log('   - Usuario:', userId);
      console.log('   - QR Length:', qr.length);
      console.log('   - Data URL disponible:', !!qrDataURL);
    });

    whatsappSimpleService.on('connected', (userId) => {
      console.log('üéâ ¬°CONECTADO! Usuario:', userId);
    });

    whatsappSimpleService.on('authenticated', (userId) => {
      console.log('üîê ¬°AUTENTICADO! Usuario:', userId);
    });

    whatsappSimpleService.on('disconnected', (userId) => {
      console.log('‚ùå Desconectado. Usuario:', userId);
    });

    // Test 3: Esperar y monitorear conexi√≥n
    console.log('\n3Ô∏è‚É£ Monitoreando conexi√≥n (60 segundos)...');
    console.log('   üì± Escanea el QR con tu WhatsApp');
    console.log('   ‚è∞ Esperando conexi√≥n...\n');

    let connected = false;
    let attempts = 0;
    const maxAttempts = 60; // 60 segundos

    while (!connected && attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      attempts++;

      const status = whatsappSimpleService.getConnectionStatus(userId);
      console.log(`   [${attempts}s] Estado: ${status.isConnected ? 'Conectado' : 'Desconectado'} | Autenticado: ${status.isAuthenticated ? 'S√≠' : 'No'}`);

      if (status.isConnected) {
        connected = true;
        console.log('\nüéâ ¬°CONEXI√ìN EXITOSA!');
        console.log('   - Tel√©fono:', status.phoneNumber);
        console.log('   - Nombre:', status.userName);
        console.log('   - √öltima conexi√≥n:', status.lastSeen);
        break;
      }

      // Mostrar QR cada 10 segundos si no est√° conectado
      if (attempts % 10 === 0) {
        const qrCode = await whatsappSimpleService.getQRCode(userId);
        if (qrCode) {
          console.log(`   üîç QR disponible (${qrCode.length} chars) - Escanea con WhatsApp`);
        } else {
          console.log('   ‚è≥ Generando QR...');
        }
      }
    }

    if (!connected) {
      console.log('\n‚è∞ Tiempo agotado. Intentando reconexi√≥n...');
      
      // Test 4: Forzar reconexi√≥n
      console.log('\n4Ô∏è‚É£ Forzando reconexi√≥n...');
      const reconnected = await whatsappSimpleService.forceReconnect(userId);
      console.log('‚úÖ Reconexi√≥n iniciada:', reconnected);
      
      // Esperar un poco m√°s
      console.log('\n5Ô∏è‚É£ Esperando reconexi√≥n (30 segundos)...');
      await new Promise(resolve => setTimeout(resolve, 30000));
      
      const finalStatus = whatsappSimpleService.getConnectionStatus(userId);
      console.log('   Estado final:', finalStatus);
    }

    // Test 5: Obtener estad√≠sticas finales
    console.log('\n6Ô∏è‚É£ Estad√≠sticas finales:');
    const stats = whatsappSimpleService.getSessionStats();
    console.log('   - Sesiones activas:', stats.activeSessions);
    console.log('   - Sesiones conectadas:', stats.connectedSessions);
    console.log('   - Chats totales:', stats.totalChats);
    console.log('   - Mensajes totales:', stats.totalMessages);
    console.log('   - QR en cache:', stats.qrCodesInCache);

    // Test 6: Limpiar
    console.log('\n7Ô∏è‚É£ Limpiando sesi√≥n...');
    await whatsappSimpleService.disconnectSession(userId);
    console.log('‚úÖ Sesi√≥n limpiada');

    console.log('\nüéâ Prueba completada!');

  } catch (error) {
    console.error('‚ùå Error durante la prueba:', error);
  }
}

// Ejecutar prueba
testQRConnection();
