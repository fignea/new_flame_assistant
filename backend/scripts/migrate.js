const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// Configuraci√≥n de la base de datos
const pool = new Pool({
  host: process.env.DB_HOST || 'postgres',
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME || 'flame_assistant',
  user: process.env.DB_USER || 'flame_user',
  password: process.env.DB_PASSWORD || 'flame_password',
  ssl: false
});

// Funci√≥n para ejecutar migraciones
async function runMigrations() {
  const client = await pool.connect();
  
  try {
    console.log('üîÑ Ejecutando migraciones...');
    
    // Crear tabla de migraciones si no existe
    await client.query(`
      CREATE TABLE IF NOT EXISTS migrations (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL UNIQUE,
        executed_at TIMESTAMP DEFAULT NOW()
      );
    `);
    
    // Obtener migraciones ya ejecutadas
    const executedMigrations = await client.query('SELECT name FROM migrations ORDER BY id');
    const executedNames = executedMigrations.rows.map(row => row.name);
    
    // Leer archivos de migraci√≥n
    const migrationsDir = path.join(__dirname, 'migrations');
    
    if (!fs.existsSync(migrationsDir)) {
      console.log('üìÅ No hay directorio de migraciones, creando...');
      fs.mkdirSync(migrationsDir, { recursive: true });
    }
    
    const migrationFiles = fs.readdirSync(migrationsDir)
      .filter(file => file.endsWith('.sql'))
      .sort();
    
    if (migrationFiles.length === 0) {
      console.log('üìù No hay archivos de migraci√≥n para ejecutar');
      return;
    }
    
    let executedCount = 0;
    
    for (const file of migrationFiles) {
      const migrationName = file.replace('.sql', '');
      
      if (executedNames.includes(migrationName)) {
        console.log(`‚è≠Ô∏è  Migraci√≥n ${migrationName} ya ejecutada, omitiendo...`);
        continue;
      }
      
      console.log(`üîÑ Ejecutando migraci√≥n: ${migrationName}`);
      
      const migrationSQL = fs.readFileSync(path.join(migrationsDir, file), 'utf8');
      
      await client.query('BEGIN');
      
      try {
        await client.query(migrationSQL);
        await client.query('INSERT INTO migrations (name) VALUES ($1)', [migrationName]);
        await client.query('COMMIT');
        
        console.log(`‚úÖ Migraci√≥n ${migrationName} ejecutada exitosamente`);
        executedCount++;
      } catch (error) {
        await client.query('ROLLBACK');
        console.error(`‚ùå Error ejecutando migraci√≥n ${migrationName}:`, error.message);
        // Continuar con la siguiente migraci√≥n en lugar de fallar
        console.log(`‚ö†Ô∏è  Continuando con la siguiente migraci√≥n...`);
        continue;
      }
    }
    
    if (executedCount > 0) {
      console.log(`üéâ Se ejecutaron ${executedCount} migraciones`);
    } else {
      console.log('‚úÖ Todas las migraciones est√°n al d√≠a');
    }
    
  } catch (error) {
    console.error('‚ùå Error ejecutando migraciones:', error.message);
    throw error;
  } finally {
    client.release();
  }
}

// Funci√≥n para verificar la conexi√≥n
async function checkConnection() {
  try {
    const client = await pool.connect();
    await client.query('SELECT 1');
    client.release();
    console.log('‚úÖ Conexi√≥n a la base de datos establecida');
    return true;
  } catch (error) {
    console.error('‚ùå Error conectando a la base de datos:', error.message);
    return false;
  }
}

// Funci√≥n principal
async function main() {
  console.log('üöÄ Iniciando proceso de migraci√≥n...');
  
  // Esperar a que la base de datos est√© disponible
  let retries = 0;
  const maxRetries = 30;
  
  while (retries < maxRetries) {
    if (await checkConnection()) {
      break;
    }
    
    retries++;
    console.log(`‚è≥ Esperando conexi√≥n a la base de datos... (${retries}/${maxRetries})`);
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  if (retries >= maxRetries) {
    console.error('‚ùå No se pudo conectar a la base de datos despu√©s de 60 segundos');
    process.exit(1);
  }
  
  try {
    await runMigrations();
    console.log('‚úÖ Proceso de migraci√≥n completado');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error en el proceso de migraci√≥n:', error.message);
    process.exit(1);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main();
}

module.exports = { runMigrations, checkConnection };
